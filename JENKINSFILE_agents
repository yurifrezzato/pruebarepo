pipeline {
    agent any
    options {
        skipDefaultCheckout true //avoid auto checkout in slaves nodes
    }

    stages {
        stage('Get Code') {
            steps {
                get_info();
                git 'https://github.com/yurifrezzato/pruebarepo.git';
                sh 'ls -la';

                stash name: "github_code", includes: "**";
            }
        }

        stage('Parallel 1') {
            parallel {
                /*stage('Unit') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "unit_pytest", includes: "result-unit.xml";
                        }
                    }
                }*/

                stage('Service') {
                    agent {
                        label 'agent2'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                export FLASK_APP=app/api.py
                                flask run &
                                java -jar /home/jenkins/wiremock-standalone-3.10.0.jar --port 9090 --root-dir ${WORKSPACE}/test/wiremock &
                                sleep 5
                                export PYTHONPATH=${WORKSPACE}
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "service_pytest", includes: "result-rest.xml";
                        }
                    }
                }

// REMOVE #######################################
                stage('Performance') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                export FLASK_APP=app/api.py
                                flask run &
                                sleep 5
                                /var/jenkins_home/apache-jmeter-5.6.3/bin/jmeter.sh -n -t test/jmeter/flask.jmx -f -l flask.jtl
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "performance_flake8", includes: "flask.jtl";
                        }
                    }
                }
// END REMOVE #######################################

                /*stage('Static') {
                    agent {
                        label 'agent3'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                python3 -m flake8 --exit-zero --format=pylint app > flake8.out
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "static_flake8", includes: "flake8.out";
                        }
                    }
                }*/
            }
        }

        /*stage('Parallel 2') {
            parallel {
                stage('Coverage') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                python3 -m coverage xml
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "coverage_coverage", includes: "coverage.xml";
                        }
                    }
                }

                stage('Performance') {
                    agent {
                        label 'agent2'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                export FLASK_APP=app/api.py
                                flask run &
                                sleep 5
                                /var/jenkins_home/apache-jmeter-5.6.3/bin/jmeter.sh -n -t test/jmeter/flask.jmx -f -l flask.jtl
                            '''
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "performance_flake8", includes: "flask.jtl";
                        }
                    }
                }
            }
        }*/

        stage('Result') {
            steps {
                get_info();

                // unstash "unit_pytest";
                unstash "service_pytest";
                // unstash "static_flake8";
                // unstash "coverage_coverage";
                unstash "performance_flake8";

                // junit 'result*.xml';

            }
        }
    }
    post {
        cleanup {
            cleanWs();
        }
    }
}

def get_info() {
    string st1_debug1 = sh (script: "whoami", returnStdout: true);
    string st1_debug2 = sh (script: "hostname", returnStdout: true);

    echo """
        whoami: ${st1_debug1}\
        hostname: ${st1_debug2}\
        WORKSPACE: ${WORKSPACE}\
    """
}
