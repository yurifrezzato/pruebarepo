pipeline {
    agent any
    options {
        skipDefaultCheckout true //avoid auto checkout in slaves nodes
    }

    stages {
        stage('Get Code') {
            steps {
                get_info();
                git 'https://github.com/yurifrezzato/pruebarepo.git';
                sh 'ls -la';

                stash name: "github_code", includes: "**";
            }
        }

        stage('Parallel 1') {
            parallel {
                stage('Unit') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh'''
                                python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit
                            '''

                            junit 'result-unit.xml';
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                        success {
                            stash name: "unit_coverage", includes: ".coverage";
                        }
                    }
                }

                stage('Service') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh '''
                                export FLASK_APP=app/api.py
                                flask run &
                                java -jar /home/jenkins/wiremock-standalone-3.10.0.jar --port 9090 --root-dir ${WORKSPACE}/test/wiremock &
                            '''

                            check_flask();
                            check_wiremock();

                            sh '''
                                export PYTHONPATH=${WORKSPACE}
                                pytest --junitxml=result-rest.xml test/rest
                            '''

                            junit 'result-rest.xml';
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

                stage('Static') {
                    agent {
                        label 'agent2'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh '''
                                python3 -m flake8 --exit-zero --format=pylint app > flake8.out
                            '''

                            recordIssues tools:
                                [flake8(name: 'Flake8', pattern: 'flake8.out')],
                                qualityGates: [
                                    [threshold: 8, type: 'TOTAL', unstable: true],
                                    [threshold: 10, type: 'TOTAL', unstable: false]
                                ]
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

                stage('Security') {
                    agent {
                        label 'agent2'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh '''
                                python3 -m bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            '''

                            recordIssues tools:
                                [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                                qualityGates: [
                                    [threshold: 2, type: 'TOTAL', unstable: true],
                                    [threshold: 4, type: 'TOTAL', unstable: false]
                                ]
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

                stage('Performance') {
                    agent {
                        label 'agent3'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            get_info();
                            unstash "github_code";

                            sh '''
                                export FLASK_APP=app/api.py
                                flask run &
                            '''

                            check_flask();

                            sh '''
                                /home/jenkins/apache-jmeter-5.6.3/bin/jmeter.sh -n -t test/jmeter/flask.jmx -f -l flask.jtl
                            '''

                            perfReport sourceDataFiles: 'flask.jtl';
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }
            }
        }

        stage('Coverage') {
            agent {
                label 'agent1'
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    get_info();
                    unstash "github_code";
                    unstash "unit_coverage";

                    sh'''
                        python3 -m coverage xml
                    '''

                    cobertura coberturaReportFile: 'coverage.xml', lineCoverageTargets: '100,0,95', conditionalCoverageTargets: '100,0,90', onlyStable: false;
                }
            }
            post {
                cleanup {
                    cleanWs();
                }
            }
        }
    }
}

def get_info() {
    string st1_debug1 = sh (script: "whoami", returnStdout: true);
    string st1_debug2 = sh (script: "hostname", returnStdout: true);

    echo """
        whoami: ${st1_debug1}\
        hostname: ${st1_debug2}\
        WORKSPACE: ${WORKSPACE}\
    """
}

def check_wiremock() {
    println "### Checking Wiremock Service ###"
    int w_port = 9090;
    int w_port_out = 1;
    while(w_port_out!=0) {
        sleep 1;
        w_port_out = sh returnStatus: true, script: "netstat -tuplen | grep ${w_port}";
    }
    println "### End checking Wiremock Service. RC: ${w_port_out} ###";
}

def check_flask() {
    println "### Checking Flask Service ###"
    int f_port = 5000;
    int f_port_out = 1;
    while(f_port_out!=0) {
        sleep 1;
        f_port_out = sh returnStatus: true, script: "netstat -tuplen | grep ${f_port}";
    }
    println "### End checking Flask Service. RC: ${f_port_out} ###"
}
